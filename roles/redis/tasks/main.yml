---
- name: Ensure the Redis paths exists for {{ redis_pod }}
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0o700"
  loop:
    - "{{ redis_config_path }}"
    - "{{ redis_data_path }}"

# FIXME: should this be stored as a secret?
- name: Create the redis.conf configuration for {{ redis_pod }}
  become_method: containers.podman.podman_unshare
  become: true
  ansible.builtin.copy:
    content: |
      user ping on nopass +ping
      user default on ~* &* +@all -@dangerous -@admin +keys >{{ redis_password }}
      user metrics on ~* &* +client +info +latency >{{ redis_metrics_password }}
    dest: "{{ redis_config_path }}/redis.conf"
    mode: "0o400"
  register: _configuration
  no_log: true

- name: Create the Redis network for {{ redis_pod }}
  containers.podman.podman_network:
    name: "{{ redis_network }}"
    internal: true

- name: Create the Redis pod for {{ redis_pod }}
  containers.podman.podman_pod:
    name: "{{ redis_pod }}"
    state: created
    infra_name: "{{ redis_pod }}-infra"
    network:
      - "{{ redis_network }}"
    userns: auto:size=1024

- name: Setup a Redis container for {{ redis_pod }}
  containers.podman.podman_container:
    name: "{{ redis_pod }}-redis"
    pod: "{{ redis_pod }}"
    image: "{{ redis_image }}"
    command: [redis-server, /etc/redis.conf]
    user: redis
    state: started
    force_restart: "{{ _configuration.changed }}"
    volumes:
      - "{{ redis_config_path }}/redis.conf:/etc/redis.conf:ro,U,Z"
      - "{{ redis_data_path }}/:/data:rw,U,Z"
    healthcheck: redis-cli --user ping --pass '' ping | grep PONG
    pull: newer
    read_only: true

- name: Ensure the Redis container is healthy for {{ redis_pod }}
  ansible.builtin.command: podman healthcheck run {{ redis_pod }}-redis
  register: _healthcheck
  until: _healthcheck is not failed
  retries: 3
  changed_when: false

- name: Install Redis dashboards for {{ redis_pod }}
  ansible.builtin.import_role:
    name: benschubert.infrastructure.monitoring
    tasks_from: dashboard
  vars:
    content: >-
      {%
        set _dashboard_data = lookup(
          'ansible.builtin.url',
          'https://grafana.com/api/dashboards/763/revisions/latest/download',
          split_lines=False,
        ) | from_json
      %}
      {{
        _dashboard_data
        | combine(
          {
            "templating": {
              "list": (_dashboard_data)["templating"]["list"]
              | rejectattr("name", "equalto", "namespace")
            }
          }
        )
        | to_json(indent=4)
        | regex_replace("\${DS_PROM}", "mimir")
      }}
    destination: redis/redis.json
