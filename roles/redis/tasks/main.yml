---
- name: Ensure the Redis paths exists for {{ redis_container }}
  ansible.builtin.file:
    path: "{{ redis_data_path }}"
    state: directory
    mode: "0o700"

- name: Generate the secret for the Redis configuration
  containers.podman.podman_secret:
    name: "{{ redis_container }}-config"
    data: |
      user ping on nopass +ping
      user default on ~* &* +@all -@dangerous -@admin +keys >{{ redis_password }}
      user metrics on ~* &* +client +info +latency >{{ redis_metrics_password }}
    state: present
  register: _configuration

- name: Create the Redis network for {{ redis_container }}
  containers.podman.podman_network:
    name: "{{ redis_network }}"
    internal: true
    state: quadlet

- name: Setup a Redis container for {{ redis_container }}
  containers.podman.podman_container:
    name: "{{ redis_container }}"
    image: "{{ redis_image }}"
    command: [redis-server, /etc/redis.conf]
    user: redis
    state: quadlet
    force_restart: "{{ _configuration.changed }}"
    volumes:
      - "{{ redis_data_path }}/:/data:rw,U,Z"
    healthcheck: redis-cli --user ping --pass '' ping | grep PONG
    healthcheck_interval: 1m
    health_startup_interval: 10s
    health_startup_timeout: 5min
    sdnotify: healthy
    pull: newer
    read_only: true
    cap_drop: [all]
    userns: auto:size=1000
    network:
      - "{{ redis_network }}.network"
    secrets:
      - "{{ redis_container }}-config,target=/etc/redis.conf"
    quadlet_options:
      - |
        [Service]
        TimeoutSec=5min
  register: _container

- name: Ensure the Redis container is running for {{ redis_container }}
  ansible.builtin.systemd_service:
    name: "{{ redis_container }}"
    scope: user
    state: "{{ _container.changed | ternary('restarted', 'started') }}"
    enabled: true
    daemon_reload: true

- name: Ensure the Redis container is healthy for {{ redis_container }}
  ansible.builtin.command: podman healthcheck run {{ redis_container }}
  changed_when: false

- name: Install Redis dashboards for {{ redis_container }}
  ansible.builtin.import_role:
    name: benschubert.infrastructure.monitoring
    tasks_from: dashboard
  vars:
    content: >-
      {%
        set _dashboard_data = lookup(
          'ansible.builtin.url',
          'https://grafana.com/api/dashboards/763/revisions/latest/download',
          split_lines=False,
        ) | from_json
      %}
      {{
        _dashboard_data
        | combine(
          {
            "templating": {
              "list": (_dashboard_data)["templating"]["list"]
              | rejectattr("name", "equalto", "namespace")
            }
          }
        )
        | to_json(indent=4)
        | regex_replace("\${DS_PROM}", "mimir")
      }}
    destination: redis/redis.json
