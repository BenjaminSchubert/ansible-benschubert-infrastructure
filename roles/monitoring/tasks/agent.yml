---
- name: Ensure the Agent's paths exist for {{ monitoring_agent_product_name }}
  become_method: containers.podman.podman_unshare
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0o700"
  loop:
    - "{{ monitoring_agent_config_path }}"
    - "{{ monitoring_agent_data_path }}"

- name: Create the agent's service account to authenticate for {{ monitoring_agent_product_name }}
  benschubert.infrastructure.authentik_user:
    authentik_token: "{{ auth_authentik_token }}"
    authentik_url: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}
    ca_path: "{{ ingress_custom_ca_cert | default(omit) }}"
    validate_certs: "{{ ingress_validate_certs }}"
    user:
      name: "{{ monitoring_agent_container }}"
      username: "{{ monitoring_agent_container }}"
      path: service-accounts
      type: service_account
  register: _service_account

- name: Add the service account to the requested group for {{ monitoring_agent_product_name }}
  when: monitoring_agent_user_group is not none
  block:
    - name: Ensure the requested group exists for {{ monitoring_agent_product_name }}
      benschubert.infrastructure.authentik_group:
        authentik_token: "{{ auth_authentik_token }}"
        authentik_url: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}
        ca_path: "{{ ingress_custom_ca_cert | default(omit) }}"
        validate_certs: "{{ ingress_validate_certs }}"
        group:
          name: "{{ monitoring_agent_user_group }}"
      register: _service_account_group

    - name: Add the service account to the group for {{ monitoring_agent_product_name }}
      benschubert.infrastructure.authentik_user_group:
        authentik_token: "{{ auth_authentik_token }}"
        authentik_url: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}
        ca_path: "{{ ingress_custom_ca_cert | default(omit) }}"
        validate_certs: "{{ ingress_validate_certs }}"
        group_pk: "{{ _service_account_group.data.pk }}"
        user_pk: "{{ _service_account.data.pk }}"

- name: Create the agent's service account's token for {{ monitoring_agent_product_name }}
  benschubert.infrastructure.authentik_token:
    authentik_token: "{{ auth_authentik_token }}"
    authentik_url: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}
    ca_path: "{{ ingress_custom_ca_cert | default(omit) }}"
    validate_certs: "{{ ingress_validate_certs }}"
    token:
      identifier: "{{ monitoring_agent_container }}-agent-auth-token"
      intent: app_password
      user: "{{ _service_account.data.pk }}"
      description: Token to authenticate the agent against mimir
      expiring: false

- name: Retrieve the generated token for {{ monitoring_agent_product_name }}
  benschubert.infrastructure.authentik_token_value:
    authentik_token: "{{ auth_authentik_token }}"
    authentik_url: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}
    ca_path: "{{ ingress_custom_ca_cert | default(omit) }}"
    validate_certs: "{{ ingress_validate_certs }}"
    token: "{{ monitoring_agent_container }}-agent-auth-token"
  register: _service_account_token

- name: Create the mimir authentication secret for {{ monitoring_agent_product_name }}
  containers.podman.podman_secret:
    name: "{{ monitoring_agent_container }}-mimir-credentials"
    data: "{{ _service_account_token.key }}"
    state: present

- name: >-
    Create the secrets for the postgresql connection strings
    for {{ monitoring_agent_product_name }}
  containers.podman.podman_secret:
    name: "{{
        '{}-postgres-{}'.format(
          monitoring_agent_container,
          monitoring_agent_postgres_instances[item].instance,
        )
      }}"
    data: "{{
        'postgresql://{username}:{password}@{instance}:5432/{database}?sslmode=disable'.format(
          **monitoring_agent_postgres_instances[item]
        )
      }}"
    state: present
  loop: "{{ range(0, monitoring_agent_postgres_instances | length) | list }}"
  loop_control:
    label: "{{ monitoring_agent_postgres_instances[item].instance }}"

- name: Create the secrets for the redis passwords for {{ monitoring_agent_product_name }}
  containers.podman.podman_secret:
    name: "{{ monitoring_agent_container }}-redis-{{ monitoring_agent_redis_instances[item].name }}"
    data: "{{ monitoring_agent_redis_instances[item].password }}"
    state: present
  loop: "{{ range(0, monitoring_agent_redis_instances | length) | list }}"
  loop_control:
    label: "{{  monitoring_agent_redis_instances[item].name }}"

- name: Create the agent default configuration file for {{ monitoring_agent_product_name }}
  become_method: containers.podman.podman_unshare
  become: true
  ansible.builtin.template:
    src: agent-config.alloy.j2
    dest: "{{ monitoring_agent_config_path }}/config.alloy"
    mode: "0o400"
  register: _configuration

- name: Setup the Alloy's container for {{ monitoring_agent_product_name }}
  containers.podman.podman_container:
    name: "{{ monitoring_agent_container }}"
    state: quadlet
    image: "{{ monitoring_agent_alloy_image }}"
    command:
      - run
      - --disable-reporting
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy
    # FIXME: Once https://github.com/grafana/alloy/issues/477 is resolved
    #        we should be able to set it to curl/wget
    # healthcheck: wget -O- http://localhost:9009/-/healthy
    healthcheck: /bin/true
    pull: newer
    read_only: true
    cap_drop: [all]
    cap_add:
      - CAP_DAC_OVERRIDE
    secrets: >-
      {{
        [
          "{}-mimir-credentials,target=/run/secrets/mimir-authentication-key".format(
            monitoring_agent_container
          ),
        ] + (
          monitoring_agent_postgres_instances
          | map(attribute="instance")
          | map(
            "regex_replace",
            "(.+)",
            "{}-postgres-\1,target=/run/secrets/postgres-\1".format(monitoring_agent_container)
          ) | list
        ) + (
          monitoring_agent_redis_instances
          | map(attribute="name")
          | map(
            "regex_replace",
            "(.+)",
            "{}-redis-\1,target=/run/secrets/redis-\1".format(monitoring_agent_container)
          ) | list
        )
      }}
    volumes:
      - "{{ monitoring_agent_config_path }}/config.alloy:/etc/alloy/config.alloy:ro,U,Z"
      - "{{ monitoring_agent_data_path }}:/var/lib/alloy/data:U,Z"
    network: "{{ monitoring_agent_networks | map('regex_replace', '^(.*)$', '\\1.network') }}"
    userns: auto:size=474
    quadlet_options:
      - |
        [Unit]
        PartOf=infrastructure.target
        Before=infrastructure.target

        [Service]
        TimeoutSec=5min

        [Install]
        WantedBy=infrastructure.target
  register: _container

- name: Ensure the agent container is started for {{ monitoring_agent_product_name }}
  ansible.builtin.systemd_service:
    name: "{{ monitoring_agent_container }}"
    scope: user
    state: "{{ (_container.changed or _configuration.changed) | ternary('restarted', 'started') }}"
    enabled: true
    daemon_reload: true

- name: Ensure the agent container is healthy for {{ monitoring_agent_product_name }}
  ansible.builtin.command: podman healthcheck run {{ monitoring_agent_container }}
  changed_when: false

- name: Ensure the directory to store alerts exists for {{ monitoring_agent_product_name }}
  become_method: containers.podman.podman_unshare
  become: true
  ansible.builtin.file:
    name: "{{ monitoring_mimir_config_path }}/rules/anonymous"
    state: directory
    mode: "0o755"

- name: Install the alerts for the service for {{ monitoring_agent_product_name }}
  become_method: containers.podman.podman_unshare
  become: true
  ansible.builtin.template:
    src: agent-alerts.yml.j2
    # yamllint disable-line rule:line-length
    dest: "{{ monitoring_mimir_config_path }}/rules/anonymous/{{ monitoring_agent_product_name }}.yml"
    mode: "0o644"
