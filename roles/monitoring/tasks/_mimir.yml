---
- name: Ensure the Mimir paths exist
  become_method: containers.podman.podman_unshare
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0o700"
    owner: 8193
    group: 8193
  loop:
    - "{{ monitoring_mimir_config_path }}/alertmanager"
    - "{{ monitoring_mimir_data_path }}/tmp"

- name: Create the Mimir configuration files
  become_method: containers.podman.podman_unshare
  become: true
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ monitoring_mimir_config_path }}/{{ item.dst }}"
    mode: "0o400"
    owner: 8193
    group: 8193
  register: _configuration
  loop:
    - src: mimir.yml.j2
      dst: mimir.yml
    - src: mimir-alertmanager-fallback-config.yml.j2
      dst: alertmanager-fallback-config.yml

- name: Create the Mimir network
  containers.podman.podman_network:
    name: ingress-monitoring
    internal: true

- name: Create the Mimir pod
  containers.podman.podman_pod:
    name: monitoring-mimir
    state: created
    infra_name: monitoring-mimir-infra
    network:
      - ingress-monitoring
    userns: auto:size=1024

- name: Setup the Mimir container
  containers.podman.podman_container:
    name: monitoring-mimir-mimir
    pod: monitoring-mimir
    state: started
    force_restart: "{{ _configuration.changed }}"
    image: "{{ monitoring_mimir_image }}"
    command: --config.file=/etc/mimir/mimir.yml
    # FIXME: the image from 2.13 now doesn't have curl or wget
    # healthcheck: wget -O- http://localhost:9009
    pull: newer
    read_only: true
    volumes:
      - "{{ monitoring_mimir_config_path }}:/etc/mimir/:ro,U,Z"
      - "{{ monitoring_mimir_config_path }}/alertmanager:/etc/mimir/alertmanager:U,Z"
      - "{{ monitoring_mimir_data_path }}:/data:U,Z"

- name: Ensure the mimir container is up
  containers.podman.podman_container_info:
    name: monitoring-mimir-mimir
  register: _containers
  until: _containers.containers[0].State.Status == "running"
  retries: 3
  changed_when: false

- name: Create an application for Mimir on Authentik
  ansible.builtin.import_role:
    name: auth
    tasks_from: application
  vars:
    application_name: mimir
    application_slug: benschubert-infrastructure-mimir
    group: admin
    meta_description: Mimir
    # yamllint disable-line rule:line-length
    icon_url: https://{{ monitoring_mimir_hostname }}:{{ ingress_https_port }}/static/mimir-icon.png
    provider_proxy:
      hostname: "{{ monitoring_mimir_hostname }}"

- name: Setup an ingress for Mimir
  ansible.builtin.import_role:
    name: benschubert.infrastructure.ingress
    tasks_from: provider
  vars:
    template_file: ingress-mimir.yml.j2
    ingress_name: mimir
    hostname: "{{ monitoring_mimir_hostname }}"
    expected_status_code: 302

- name: Register Mimir as a datasource on Grafana
  community.grafana.grafana_datasource:
    name: mimir
    ds_type: prometheus
    ds_url: http://monitoring-mimir:9009/prometheus
    grafana_url: https://{{ monitoring_grafana_hostname }}:{{ ingress_https_port }}
    grafana_user: "{{ monitoring_grafana_admin_user }}"
    grafana_password: "{{ monitoring_grafana_admin_password }}"
    is_default: true
    validate_certs: false

- name: Register Mimir's AlertManager as a datasource on Grafana
  community.grafana.grafana_datasource:
    name: alertmanager
    ds_type: alertmanager
    ds_url: http://monitoring-mimir:9009/
    additional_json_data:
      implementation: mimir
    grafana_url: https://{{ monitoring_grafana_hostname }}:{{ ingress_https_port }}
    grafana_user: "{{ monitoring_grafana_admin_user }}"
    grafana_password: "{{ monitoring_grafana_admin_password }}"
    validate_certs: false
