---
- name: Warn if the bootstrap secrets are set
  ansible.builtin.fail:
    msg: >-
      The bootstrap admin password is still injected. You might want to
      change the secrets and remove them from the variables for security
  when: monitoring_grafana_admin_bootstrap_password
  ignore_errors: true
  tags:
    - skip_ansible_lint

- name: Ensure the paths for grafana exist
  become_method: containers.podman.podman_unshare
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0o755"
  loop:
    - "{{ monitoring_grafana_data_path }}"
    - "{{ monitoring_grafana_config_path }}/provisioning/dashboards"
    - "{{ monitoring_grafana_config_path }}/dashboards"

- name: Create the Grafana provisioning configuration
  become_method: containers.podman.podman_unshare
  become: true
  ansible.builtin.template:
    src: grafana-dashboard-provision.yml.j2
    dest: "{{ monitoring_grafana_config_path }}/provisioning/dashboards/benschubert-services.yml"
    mode: "0o744"

- name: Create the Grafana network
  containers.podman.podman_network:
    name: ingress-monitoring
    internal: true
    state: quadlet

- name: Create the Grafana external network
  containers.podman.podman_network:
    name: monitoring-grafana-external
    state: quadlet

- name: Create an application for Grafana on Authentik
  ansible.builtin.import_role:
    name: benschubert.infrastructure.auth
    tasks_from: application
  vars:
    allowlisted_groups: "{{ monitoring_grafana_allowlisted_groups }}"
    application_name: grafana
    application_slug: benschubert-infrastructure-grafana
    group: admin
    meta_description: Grafana
    # yamllint disable-line rule:line-length
    icon_url: https://{{ monitoring_grafana_hostname }}:{{ ingress_https_port }}/public/img/grafana_icon.svg
    provider_oauth2:
      redirect_uris:
        # yamllint disable-line rule:line-length
        - url: https://{{ monitoring_grafana_hostname }}:{{ ingress_https_port }}/login/generic_oauth
          matching_mode: strict
      scopes:
        - profile
        - email
        - openid
      sub_mode: user_username

- name: Retrieve the created provider
  benschubert.infrastructure.authentik_provider_info:
    authentik_token: "{{ auth_authentik_token }}"
    authentik_url: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}
    ca_path: "{{ ingress_custom_ca_cert | default(omit) }}"
    validate_certs: "{{ ingress_validate_certs }}"
    name: grafana
    type: oauth2
  register: _provider_result

- name: Create the grafana admin group
  benschubert.infrastructure.authentik_group:
    authentik_token: "{{ auth_authentik_token }}"
    authentik_url: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}
    ca_path: "{{ ingress_custom_ca_cert | default(omit) }}"
    validate_certs: "{{ ingress_validate_certs }}"
    group:
      name: "{{ monitoring_grafana_admin_group_name }}"

- name: Create the required secrets
  containers.podman.podman_secret:
    name: "{{ item.name }}"
    data: "{{ item.data }}"
    state: present
  when: item.data
  loop:
    - name: monitoring-grafana-postgres-password
      data: "{{ monitoring_grafana_postgres_password }}"
    - name: monitoring-grafana-client-secret
      data: "{{ _provider_result.data.client_secret }}"
    - name: monitoring-grafana-secret-key
      data: "{{ monitoring_grafana_secret_key }}"
  loop_control:
    label: "{{ item.name }}"

- name: Configure the postgres image if not provided explicitly
  ansible.builtin.set_fact:
    monitoring_grafana_postgres_image: "{{ postgres_image }}"
  when: monitoring_grafana_postgres_image is not defined

- name: Create the Grafana database
  ansible.builtin.import_role:
    name: benschubert.infrastructure.postgres
  vars:
    postgres_pod: monitoring-grafana-postgres
    postgres_password_secret: monitoring-grafana-postgres-password
    postgres_data_path: "{{ monitoring_grafana_postgres_data_path }}"
    postgres_image: "{{ monitoring_grafana_postgres_image }}"
    postgres_user: grafana
    postgres_database: grafana
    postgres_network: monitoring-grafana-postgres

- name: Create the Grafana pod
  containers.podman.podman_pod:
    name: monitoring-grafana
    state: quadlet
    infra_name: monitoring-grafana-infra
    network:
      - ingress-monitoring.network
      - monitoring-grafana-external.network
      - monitoring-grafana-postgres.network
    userns: auto:size=473
    quadlet_options:
      - |
        [Unit]
        PartOf=infrastructure.target
        Before=infrastructure.target
        After=auth.service
        After=ingress.service
        After=monitoring-grafana-postgres.service
        Requires=auth.service
        Requires=ingress.service
        Requires=monitoring-grafana-postgres.service

        [Install]
        WantedBy=infrastructure.target
  register: _pod

- name: Setup the Grafana container
  containers.podman.podman_container:
    name: monitoring-grafana-grafana
    pod: monitoring-grafana.pod
    state: quadlet
    image: "{{ monitoring_grafana_image }}"
    healthcheck: curl --fail http://localhost:3000
    healthcheck_interval: 1m
    health_startup_interval: 10s
    health_startup_timeout: 5min
    sdnotify: healthy
    read_only: true
    cap_drop: [all]
    env:
      # Login
      GF_AUTH_GENERIC_OAUTH_ENABLED: "true"
      GF_AUTH_GENERIC_OAUTH_NAME: authentik
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: "{{ _provider_result.data.client_id }}"
      GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET__FILE: /run/secrets/monitoring-grafana-client-secret
      GF_AUTH_GENERIC_OAUTH_SCOPES: openid profile email
      # yamllint disable-line rule:line-length
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}/application/o/authorize/
      # yamllint disable-line rule:line-length
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}/application/o/token/
      # yamllint disable-line rule:line-length
      GF_AUTH_GENERIC_OAUTH_API_URL: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}/application/o/userinfo/
      # yamllint disable-line rule:line-length
      GF_AUTH_SIGNOUT_REDIRECT_URL: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}/application/o/benschubert-infrastructure-grafana/end-session/
      GF_AUTH_GENERIC_OAUTH_TLS_SKIP_VERIFY_INSECURE: >-
        {{ '1' if (not ingress_validate_certs or ingress_custom_ca_cert) else omit }}
      GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: >-
        contains(groups[*], '{{ monitoring_grafana_admin_group_name }}') && 'Admin' || 'Viewer'
      GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_STRICT: "true"
      GF_AUTH_GENERIC_OAUTH_AUTO_LOGIN: "true"
      # Database
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: monitoring-grafana-postgres
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: grafana
      GF_DATABASE_PASSWORD__FILE: /run/secrets/monitoring-grafana-postgres-password
      # Misc
      GF_SERVER_ROOT_URL: https://{{ monitoring_grafana_hostname }}:{{ ingress_https_port }}
      GF_SERVER_DOMAIN: "{{ monitoring_grafana_hostname }}"
      GF_SERVER_ENFORCE_DOMAIN: "1"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "0"
      GF_ANALYTICS_CHECK_FOR_PLUGIN_UPDATES: "0"
      GF_SECURITY_SECRET_KEY__FILE: /run/secrets/monitoring-grafana-secret-key
      GF_SECURITY_ADMIN_USER: "{{ monitoring_grafana_admin_user }}"
      GF_SECURITY_ADMIN_PASSWORD: "{{ monitoring_grafana_admin_bootstrap_password }}"
    pull: newer
    secrets:
      - monitoring-grafana-postgres-password,target=/run/secrets/monitoring-grafana-postgres-password
      - monitoring-grafana-client-secret,target=/run/secrets/monitoring-grafana-client-secret
      - monitoring-grafana-secret-key,target=/run/secrets/monitoring-grafana-secret-key
    volumes:
      - "{{ monitoring_grafana_data_path }}:/var/lib/grafana:rw,U,Z"
      - "{{ monitoring_grafana_config_path }}/provisioning:/etc/grafana/provisioning:ro,U,Z"
      - "{{ monitoring_grafana_config_path }}/dashboards:/etc/grafana/dashboards:ro,U,Z"
    quadlet_filename: monitoring-grafana
    quadlet_options:
      - |
        [Unit]
        PartOf=infrastructure.target
        Before=infrastructure.target

        [Service]
        TimeoutSec=5min
  register: _container

- name: Ensure the Grafana container is started
  ansible.builtin.systemd_service:
    name: monitoring-grafana
    scope: user
    state: "{{ (_pod.changed or _container.changed) | ternary('restarted', 'started') }}"
    enabled: true
    daemon_reload: true

- name: Ensure the grafana container is healthy
  ansible.builtin.command: podman healthcheck run monitoring-grafana-grafana
  changed_when: false

- name: Setup an ingress for Grafana
  ansible.builtin.import_role:
    name: benschubert.infrastructure.ingress
    tasks_from: provider
  vars:
    template_file: ingress-grafana.yml.j2
    ingress_name: grafana
    hostname: "{{ monitoring_grafana_hostname }}"
    expected_status_code: 302

- name: Install Grafana dashboards
  ansible.builtin.include_role:
    name: benschubert.infrastructure.monitoring
    tasks_from: dashboard
  vars:
    # yamllint disable rule:line-length
    content: >-
      {{
        lookup(
          "ansible.builtin.url",
          "https://raw.githubusercontent.com/grafana/grafana/refs/heads/main/public/app/plugins/datasource/prometheus/dashboards/grafana_stats.json",
          split_lines=False,
        )
        | regex_replace("\${DS_PROMETHEUS}", "mimir")
        | regex_replace(
          'job=\\"grafana\\"',
          'instance=\\"grafana\\", job=\\"prometheus.scrape.benschubert_infrastructure_monitoring_monitor\\"',
        )
        | from_json
        | to_json(indent=4)
      }}
    # yamllint enable rule:line-length
    destination: monitoring/grafana.json
