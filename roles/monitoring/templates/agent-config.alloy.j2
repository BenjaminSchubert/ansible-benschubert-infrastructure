logging {
  level = "info"
  format = "logfmt"
}

local.file "mimir_authentication_key" {
  filename = "/run/secrets/mimir-authentication-key"
  is_secret = true
}

{% if monitoring_agent_postgres_instances %}
{% for instance in monitoring_agent_postgres_instances %}
local.file "{{ instance.instance | replace("-", "_") }}" {
  filename = "/run/secrets/postgres-{{ instance.instance }}"
  is_secret = true
}
{% endfor %}

prometheus.exporter.postgres "benschubert_infrastructure" {
  data_source_names = [
    {% for instance in monitoring_agent_postgres_instances %}
    local.file.{{ instance.instance | replace("-", "_") }}.content,
    {% endfor %}
  ]
}
{% endif %}

prometheus.scrape "benschubert_infrastructure" {
  scrape_interval = "30s"
  targets = concat(
    [
      {"__address__" = "localhost:12345", "instance" = "agent"},
      {% for instance, address in monitoring_agent_prometheus_endpoints.items() %}
      {"__address__" = "{{ address }}", "instance" = "{{ instance }}"},
      {% endfor %}
    ],
    {% if monitoring_agent_postgres_instances %}
    prometheus.exporter.postgres.benschubert_infrastructure.targets,
    {% endif %}
  )
  forward_to = [
    prometheus.remote_write.monitor.receiver,
  ]
}

prometheus.remote_write "monitor" {
    endpoint {
        url = "https://{{ monitoring_mimir_hostname }}:{{ ingress_https_port }}/api/v1/push"
        basic_auth {
          username = "{{ monitoring_agent_pod }}"
          password = local.file.mimir_authentication_key.content
        }
        {% if (not ingress_validate_certs) or ingress_custom_ca_cert_url is not none %}
        tls_config {
          insecure_skip_verify = true
        }
        {% endif %}
    }
}
