---
- name: Converge
  hosts: all
  gather_facts: false

  tasks:
    - name: Download and setup custom certificate
      when: ingress_custom_ca_cert_url | default(False)
      block:
        - name: Set the path to the custom ca
          ansible.builtin.set_fact:
            ingress_custom_ca_cert: /tmp/custom_ca_cert.pem

        - name: Download custom CA
          ansible.builtin.uri:
            url: "{{ ingress_custom_ca_cert_url }}"
            dest: "{{ ingress_custom_ca_cert }}"
            status_code:
              - 200
              - 304
          tags:
            - molecule-idempotence-notest

    # FIXME: find out how to do replacements for molecule that support default
    #        values of '{}'
    - name: Patch ansible variables that should default to empty dict
      ansible.builtin.set_fact:
        ingress_traefik_certificates_resolvers: "{{ ingress_traefik_certificates_resolvers or {} }}"
        ingress_traefik_environment_variables: "{{ ingress_traefik_environment_variables or {} }}"
        ingress_traefik_secrets: "{{ ingress_traefik_secrets or {} }}"

    - name: Setup everything
      block:
        - name: Execute the main role
          ansible.builtin.import_role:
            name: benschubert.infrastructure.main
      rescue:
        - name: Gather facts for all containers
          containers.podman.podman_container_info:
          register: _containers

        - name: Gather failing containers
          ansible.builtin.set_fact:
            _containers_failing: "{{ _containers_failing | default([]) + [item] }}"
          loop: "{{ _containers.containers | sort(attribute='Name') }}"
          when: >-
            item["State"]["Status"] == "exited"
            or item['State'].get('Health', {}).get('Status', '') not in ['healthy', '']
          loop_control:
            label: "{{ item['Name'] }}"

        - name: Gather logs from failing containers
          ansible.builtin.command:
            cmd: podman logs --tail 20 {{ item["Name"] }}
          changed_when: false
          loop: "{{ _containers_failing | default([]) }}"
          register: _container_logs
          loop_control:
            label: "{{ item['Name'] }}"

        - name: Show all containers states
          ansible.builtin.fail:
            msg: |
              Containers item:
              {% for item in _containers.containers | sort(attribute='Name') %}
                {% set s = item["State"] %}
                {{ item["Name"] }}: {{ s["Status"] }} {{ s.get("Health", {}).get("Status", "-") }}
              {% endfor %}

              {% if _containers_failing | default(false) %}
              Failing healthchecks:
              {% for item in _containers_failing %}
                {{ item["Name"] }}:
                  {{ item["State"]["Health"]["Log"][-1]["Output"] | indent() }}
              {% endfor %}

              {% for item, logs in _containers_failing | zip(_container_logs.results) %}
                {{ item["Name"] }}:
                  {{ logs.stderr | indent() }}
              {% endfor %}
              {% else %}
              All containers are healthy!
              {% endif %}

    - name: Install the mail gateway
      ansible.builtin.import_role:
        name: benschubert.infrastructure.mailpit_test_gateway

    - name: Get the akadmin user info
      benschubert.infrastructure.authentik_user_info:
        authentik_token: "{{ auth_authentik_token }}"
        authentik_url: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}
        ca_path: "{{ ingress_custom_ca_cert | default(omit) }}"
        validate_certs: "{{ ingress_validate_certs }}"
        username: akadmin
      register: user

    - name: Add akadmin to the admin group
      when: test_akadmin_user_group
      block:
        - name: Get the Grafana group info
          benschubert.infrastructure.authentik_group_info:
            authentik_token: "{{ auth_authentik_token }}"
            authentik_url: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}
            ca_path: "{{ ingress_custom_ca_cert | default(omit) }}"
            validate_certs: "{{ ingress_validate_certs }}"
            name: "{{ test_akadmin_user_group }}"
          register: _group

        - name: Add akadmin to the admin group
          benschubert.infrastructure.authentik_user_group:
            authentik_token: "{{ auth_authentik_token }}"
            authentik_url: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}
            ca_path: "{{ ingress_custom_ca_cert | default(omit) }}"
            validate_certs: "{{ ingress_validate_certs }}"
            user_pk: "{{ user.data.pk }}"
            group_pk: "{{ _group.data.pk }}"

    - name: Create a token to access services as akadmin
      benschubert.infrastructure.authentik_token:
        authentik_token: "{{ auth_authentik_token }}"
        authentik_url: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}
        ca_path: "{{ ingress_custom_ca_cert | default(omit) }}"
        validate_certs: "{{ ingress_validate_certs }}"
        token:
          identifier: molecule-test
          intent: app_password
          user: "{{ user.data.pk }}"
          description: A token to allow Akadmin to access services via APIs
          expiring: false

    - name: Create a non-privileged user
      benschubert.infrastructure.authentik_user:
        authentik_token: "{{ auth_authentik_token }}"
        authentik_url: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}
        ca_path: "{{ ingress_custom_ca_cert | default(omit) }}"
        validate_certs: "{{ ingress_validate_certs }}"
        user:
          name: molecule-unprivileged-test-user
          username: molecule-unprivileged-test-user
          type: internal
      register: _molecule_unprivileged_user

    - name: Create a token to access Authentik as molecule-unprivileged-test-user
      benschubert.infrastructure.authentik_token:
        authentik_token: "{{ auth_authentik_token }}"
        authentik_url: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}
        ca_path: "{{ ingress_custom_ca_cert | default(omit) }}"
        validate_certs: "{{ ingress_validate_certs }}"
        token:
          identifier: molecule-unprivileged-test-user-password
          intent: api
          user: "{{ _molecule_unprivileged_user.data.pk }}"
          description: A token to allow the unprivileged user to talk to Authentik
          expiring: false

    ##
    # Example on how to connect a node-exporter to mimir deployed this way
    ##
    - name: Install alloy on the host and configure it
      block:
        - name: Install grafana apt gpg signing key
          become: true
          ansible.builtin.get_url:
            url: https://apt.grafana.com/gpg.key
            dest: /etc/apt/keyrings/grafana.asc
            mode: "0o400"
          register: _gpg_key

        - name: Dearmor the grafana gpg key
          become: true
          ansible.builtin.command:
            cmd: gpg --dearmor --output /etc/apt/keyrings/grafana.gpg /etc/apt/keyrings/grafana.asc
          when: _gpg_key.changed
          changed_when: true
          tags:
            - skip_ansible_lint

        - name: Add grafana apt repository
          become: true
          ansible.builtin.apt_repository:
            repo: deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main
            state: present
            filename: grafana

        - name: Install alloy
          become: true
          ansible.builtin.apt:
            name: alloy

        - name: Create the agent's service account to authenticate
          benschubert.infrastructure.authentik_user:
            authentik_token: "{{ auth_authentik_token }}"
            authentik_url: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}
            ca_path: "{{ ingress_custom_ca_cert | default(omit) }}"
            validate_certs: "{{ ingress_validate_certs }}"
            user:
              name: host-metrics
              username: host-metrics
              path: service-accounts
              type: service_account
          register: _service_account

        - name: Add the service account to the requested group
          when: default_monitor_agent_user_group
          block:
            - name: Ensure the requested group exists
              benschubert.infrastructure.authentik_group:
                authentik_token: "{{ auth_authentik_token }}"
                authentik_url: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}
                ca_path: "{{ ingress_custom_ca_cert | default(omit) }}"
                validate_certs: "{{ ingress_validate_certs }}"
                group:
                  name: "{{ default_monitor_agent_user_group }}"
              register: _service_account_group

            - name: Add the service account to the group
              benschubert.infrastructure.authentik_user_group:
                authentik_token: "{{ auth_authentik_token }}"
                authentik_url: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}
                ca_path: "{{ ingress_custom_ca_cert | default(omit) }}"
                validate_certs: "{{ ingress_validate_certs }}"
                group_pk: "{{ _service_account_group.data.pk }}"
                user_pk: "{{ _service_account.data.pk }}"

        - name: Create the agent's service account's token
          benschubert.infrastructure.authentik_token:
            authentik_token: "{{ auth_authentik_token }}"
            authentik_url: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}
            ca_path: "{{ ingress_custom_ca_cert | default(omit) }}"
            validate_certs: "{{ ingress_validate_certs }}"
            token:
              identifier: host-metrics-agent-auth-token
              intent: app_password
              user: "{{ _service_account.data.pk }}"
              description: Token to authenticate the agent against mimir
              expiring: false

        - name: Retrieve the generated token
          benschubert.infrastructure.authentik_token_value:
            authentik_token: "{{ auth_authentik_token }}"
            authentik_url: https://{{ auth_authentik_hostname }}:{{ ingress_https_port }}
            ca_path: "{{ ingress_custom_ca_cert | default(omit) }}"
            validate_certs: "{{ ingress_validate_certs }}"
            token: host-metrics-agent-auth-token
          register: _mimir_service_account_token

        - name: Configure alloy
          become: true
          ansible.builtin.template:
            src: config.alloy.j2
            dest: /etc/alloy/config.alloy
            mode: "0o600"
            owner: alloy
            group: alloy
          vars:
            password: "{{ _mimir_service_account_token.key }}"
            username: host-metrics
          register: _alloy_config
          no_log: true

        - name: Ensure alloy is running
          become: true
          ansible.builtin.systemd:
            service: alloy
            state: "{{ 'restarted' if _alloy_config.changed else 'started' }}"
            enabled: true

        - name: Ensure the directory to store alerts exists
          become_method: containers.podman.podman_unshare
          become: true
          ansible.builtin.file:
            name: "{{ monitoring_loki_config_path }}/rules/fake"
            state: directory
            mode: "0o755"

        - name: Install alloy Loki alerts
          become: true
          become_method: containers.podman.podman_unshare
          ansible.builtin.template:
            src: loki-alerts.yml.j2
            dest: "{{ monitoring_loki_config_path }}/rules/fake/node.yml"
            mode: "0o644"

        - name: Install the alerts for the host
          become_method: containers.podman.podman_unshare
          become: true
          ansible.builtin.template:
            src: host-agent-alerts.yml.j2
            dest: "{{ monitoring_mimir_config_path }}/rules/anonymous/node.yml"
            mode: "0o644"
