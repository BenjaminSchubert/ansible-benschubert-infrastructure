logging {
  level = "info"
  format = "logfmt"
}

prometheus.exporter.unix "host" {}

prometheus.scrape "host" {
  scrape_interval = "30s"
  targets = concat(
    [{"__address__" = "localhost:12345", "instance" = "agent"}],
    prometheus.exporter.unix.host.targets,
  )
  forward_to = [prometheus.remote_write.monitor.receiver]
}

prometheus.remote_write "monitor" {
    endpoint {
        url = "https://{{ monitoring_mimir_hostname }}:{{ ingress_https_port }}/api/v1/push"
        basic_auth {
          username = "{{ username }}"
          password = "{{ password }}"
        }
        {% if (not ingress_validate_certs) or ingress_custom_ca_cert is not none %}
        tls_config {
          insecure_skip_verify = true
        }
        {% endif %}
    }
}

loki.relabel "journal" {
  forward_to = []

  rule {
    source_labels = ["__journal__systemd_unit"]
    target_label  = "unit"
  }
  rule {
    source_labels = ["__journal_container_name"]
    target_label  = "container"
  }
}

loki.source.journal "read"  {
  forward_to    = [loki.write.endpoint.receiver]
  relabel_rules = loki.relabel.journal.rules
  labels        = {component = "loki.source.journal"}
}

loki.write "endpoint" {
  endpoint {
    batch_wait = "30s"
    batch_size = "10MiB"
    url ="https://{{ monitoring_loki_hostname }}:{{ ingress_https_port }}/loki/api/v1/push"
    basic_auth {
      username = "{{ username }}"
      password = "{{ password }}"
    }
    {% if (not ingress_validate_certs) or ingress_custom_ca_cert is not none %}
    tls_config {
        insecure_skip_verify = true
    }
    {% endif %}
  }
}
