---
# All the checks run here (except for secret scanning) can be run locally with:
#
#   dwas
#
name: ci

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.repository }}-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  ANSIBLE: 2.18
  PYTHON: 3.13

jobs:
  ###
  # Linting jobs
  ###
  ansible-lint:
    runs-on: ubuntu-latest
    env:
      # Not quite sure why we need to set this, but it gives warnings otherwise
      ANSIBLE_COLLECTIONS_PATH: ${{ github.workspace }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install python
        uses: actions/setup-python@v5
        with:
          cache: pip
          python-version: ${{ env.PYTHON }}
      - name: Install dependencies
        run: pip install -r requirements/requirements.txt
      - name: Install the collection
        run: ansible-galaxy collection install .
      - name: Run ansible-lint
        uses: ansible/ansible-lint@main
        with:
          args: --strict
          setup_python: false
          working_directory: ${{ github.workspace }}/ansible_collections/benschubert/infrastructure/
  mypy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install python
        uses: actions/setup-python@v5
        with:
          cache: pip
          python-version: ${{ env.PYTHON }}
      - name: Install dependencies
        run: >-
          pip install
          mypy
          -r requirements/requirements-docs.txt
          -r requirements/requirements-tests.txt
          -r requirements/requirements-types.txt
      - name: Run mypy
        run: mypy .
  pylint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install python
        uses: actions/setup-python@v5
        with:
          cache: pip
          python-version: ${{ env.PYTHON }}
      - name: Install dependencies
        run: >-
          pip install
          pylint
          -r requirements/requirements.txt
          -r requirements/requirements-tests.txt
      - name: Run Pylint
        run: pylint .
  ruff:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run ruff
        uses: astral-sh/ruff-action@v3
      - name: Check format
        uses: astral-sh/ruff-action@v3
        with:
          args: format --diff
  sanity:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run sanity checks
        uses: ansible-community/ansible-test-gh-action@release/v1
        with:
          ansible-core-version: stable-${{ env.ANSIBLE }}
          coverage: never
          origin-python-version: ${{ env.PYTHON }}
          sanity-skip-tests: no-assert,pylint
          target-python-version: ${{ env.PYTHON }}
          testing-type: sanity
  secret-scanning:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Secret Scanning
        uses: trufflesecurity/trufflehog@main

  ###
  # Tests
  ###
  molecule:
    name: molecule (${{ matrix.setup }})
    strategy:
      matrix:
        setup:
          - default
          - privileged
    env:
      PY_COLORS: 1
      ANSIBLE_FORCE_COLOR: 1
    runs-on: ubuntu-latest
    steps:
      - name: Increase subuids/subgids for runner
        run: echo "${USER}:100000:655360" | sudo tee /etc/subuid /etc/subgid
      - name: Reset podman
        run: podman system reset --force
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install python
        uses: actions/setup-python@v5
        with:
          cache: pip
          python-version: ${{ env.PYTHON }}
      - name: Install dependencies
        run: pip install -r requirements/requirements-dev.txt
      - name: Allow binding to lower ports
        if: ${{ matrix.setup == 'privileged' }}
        run: >-
          sudo sysctl net.ipv4.ip_unprivileged_port_start=80
          && cp molecule/default/privileged-env.yml .env.yml
      - name: molecule create
        run: molecule create
      - name: molecule converge
        run: mkdir -p ${PWD}/.cache && molecule converge
        env:
          ANSIBLE_LOG_PATH: ${PWD}/.cache/ansible-logs-converge
      - name: molecule idempotence
        run: molecule idempotence
        env:
          ANSIBLE_LOG_PATH: ${PWD}/.cache/ansible-logs-idempotence
      - name: molecule verify
        run: molecule verify
      - name: Analyse the output of molecule
        run: >-
          echo "## Converge" >> $GITHUB_STEP_SUMMARY &&
          python .github/scripts/analyse-ansible-output.py .cache/ansible-logs-converge
          | tee --append $GITHUB_STEP_SUMMARY
          && echo "## Idempotence" >> $GITHUB_STEP_SUMMARY &&
          python .github/scripts/analyse-ansible-output.py .cache/ansible-logs-idempotence
          | tee --append $GITHUB_STEP_SUMMARY

  ###
  # Package
  ###
  package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install python
        uses: actions/setup-python@v5
        with:
          cache: pip
          python-version: ${{ env.PYTHON }}
      - name: Install dependencies
        run: pip install -r requirements/requirements.txt
      - name: Build collection
        run: ansible-galaxy collection build --output-path _artifacts/
      - name: Save packaged collection
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: _artifacts/*
          retention-days: 7

  ###
  # Docs
  ###
  docs:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ansible_collections/benschubert/infrastructure/
    env:
      ANSIBLE_COLLECTIONS_PATH: ${{ github.workspace }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: ansible_collections/benschubert/infrastructure/
      - name: Install python
        uses: actions/setup-python@v5
        with:
          cache: pip
          python-version: ${{ env.PYTHON }}
      - name: Install dependencies
        run: pip install -r requirements/requirements-docs.txt
      - name: Validate the collection's documentation
        run: >-
          antsibull-docs
          --config-file=docs/antsibull-docs.cfg
          lint-collection-docs
          --plugin-docs
          --validate-collection-refs=all
          .
      - name: Generate the collection's documentation
        run: >-
          antsibull-docs
          --config-file=docs/antsibull-docs.cfg
          collection
          --use-current
          --fail-on-error
          --dest-dir=docs
          --squash-hierarchy
          benschubert.infrastructure
      - name: Build documentation
        run: sphinx-build -W --color -b=html docs/ _artifacts/docs
      - name: Validate links
        run: sphinx-build -W --color -b=linkcheck docs/ /tmp/linkcheck
      - name: Validate spelling
        run: sphinx-build -W --color -b=spelling docs/ /tmp/spelling
      - name: Save the documentation
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: ansible_collections/benschubert/infrastructure//_artifacts/*
          retention-days: 7
